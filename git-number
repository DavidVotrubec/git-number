#!/usr/bin/perl
use strict;
use warnings;

# git-number:
#
# When run without args: Runs git-id and exit (numbers your files for git's
#                        consumption later)
# When run with args: Runs git, and replaces any number it found in the args with the
#                     equivalent filename from the previous run of git-number

=pod

=head1 NAME

git-number

=head1 SYNOPSIS

    git-number [-h|--color=<when>] [git-cmd [git-options] [files or numbers]]

=head1 OPTIONS

=over 4

=item --color=<when>

Enable or disable colorized git-status output, E<lt>whenE<gt> is one of
I<always>, I<auto> or I<never>. Default is I<always>.

=item -h

Show this help message

=back
=cut

my $me = __FILE__;
sub show_usage_and_exit {
    my ($exit_value) = @_;
    $exit_value = 0 if ! defined $exit_value;
    system(qq[perldoc "$0"]);
    exit $exit_value;
}

my $first_arg = $ARGV[0] || '';

if ($first_arg eq '-h') {
    show_usage_and_exit();
}

my $color = 'always';
if ( $first_arg =~ m{--color=([a-z]+)} ) {
    if ($1 =~ m{(always|auto|never)}) {
        $color = $1;
        shift @ARGV;
    } else {
        show_usage_and_exit(1);
    }
}

if (scalar @ARGV == 0) {
    system("git-id --color=$color");
    exit
}

my @args;
foreach my $arg (@ARGV) {
    if ( $arg =~ m/^[0-9][0-9]*$/ ) {
        push @args, split("\n", `git-list $arg`);
    } elsif ( $arg =~ m/^[0-9][0-9]*-[0-9][0-9]*$/ ) {
        push @args, split("\n", `git-list $arg`);
    } else {
        push @args, $arg;
    }
}

my $git_cmd = "git " . join(' ', @args);
print $git_cmd . "\n";
system($git_cmd);
